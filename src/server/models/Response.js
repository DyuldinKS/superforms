import db from '../db/index';
import AbstractModel from './AbstractModel';
import Form from './Form';
import { isNatural } from '../utils/extras';


class Response extends AbstractModel {
	/*----------------------------------------------------------------------------
	------------------------------- STATIC METHODS -------------------------------
	----------------------------------------------------------------------------*/

	static findById(id) {
		return db.query(
			'SELECT * FROM to_response_full(get_response($1));',
			[id],
		)
			.then(found => (found ? new Response(found) : null));
	}


	/*----------------------------------------------------------------------------
	------------------------------ INSTANCE METHODS ------------------------------
	----------------------------------------------------------------------------*/
}


/*------------------------------------------------------------------------------
----------------------------- PROTOTYPE PROPERTIES -----------------------------
------------------------------------------------------------------------------*/

Response.prototype.tableName = 'responses';

Response.prototype.entityName = 'response';

Response.prototype.props = {
	// values received from client
	formId: { writable: false, readable: true, check: isNatural },
	items: { writable: true, readable: true, check: Form.checkAnswers },
	secret: { writable: false, readable: false }, // password for filling form

	// values set by model
	respondent: { writable: true, readable: true }, // { ip, [user_id] }
	recipientId: { writable: false, readable: true }, // for auto mailing
	authorId: { writable: false, readable: true },

	// values generated by db
	id: { writable: false, readable: true },
	created: { writable: false, readable: true },
	updated: { writable: false, readable: true },
	deleted: { writable: false, readable: true },
};


Object.freeze(Response);


export default Response;
