import moment from 'moment';
import db from '../db/index';
import AbstractModel from './AbstractModel';
import {
	isNumber,
	isNatural,
	isString,
	isObject,
	isArray,
	isDate,
} from '../utils/extras';
import { HTTPError } from '../errors';


class Form extends AbstractModel {
	/*----------------------------------------------------------------------------
	------------------------------- STATIC METHODS -------------------------------
	----------------------------------------------------------------------------*/

	static findById(id) {
		return db.query('SELECT * FROM to_form_full(get_form($1)) form;', [id])
			.then(found => (found ? new Form(found) : null));
	}


	static checkTitle(title) {
		return isString(title) && title.length > 0;
	}


	static checkScheme(scheme) {
		if(!isObject(scheme)) return false;

		const { items, order } = scheme;
		if(!isObject(items) || !isArray(order)) return false;

		const ids = Object.keys(items);
		return ids.length === order.length
			&& order.every(id => isObject(items[id]));
	}


	static checkCollecting(c) {
		// here is stub before implementing Collecting class
		return isObject(c);
	}


	/*----------------------------------------------------------------------------
	------------------------------ INSTANCE METHODS ------------------------------
	----------------------------------------------------------------------------*/

	// @implements
	save({ author }) {
		this.ownerId = author.id;

		return super.save({ author });
	}


	// get responses in short(default) or full form
	getResponses(mode) {
		const cast = `to_response_${mode === 'full' ? 'full' : 'short'}`;
		return db.queryAll(
			`SELECT resp_short.* FROM get_responses_by_form($1) resp,
				${cast}(resp) resp_short;`,
			[this.id],
		)
			.then((responses) => {
				this.responses = responses;
				return responses;
			});
	}
}


/*------------------------------------------------------------------------------
----------------------------- PROTOTYPE PROPERTIES -----------------------------
------------------------------------------------------------------------------*/

Form.prototype.tableName = 'forms';

Form.prototype.entityName = 'form';

Form.prototype.props = {
	// values received from client
	title: { writable: true, readable: true, check: Form.checkTitle },
	description: { writable: true, readable: true, check: isString },
	scheme: { writable: true, readable: true, check: Form.checkScheme },

	// values set by model
	collecting: { writable: true, readable: true, check: Form.checkCollecting },
	ownerId: { writable: true, readable: true, check: isNatural },
	authorId: { writable: false, readable: true, check: isNatural },

	// values generated by db
	id: { writable: false, readable: true, check: isNatural },
	created: { writable: false, readable: true, check: isDate },
	updated: { writable: false, readable: true, check: isDate },
	deleted: { writable: false, readable: true, check: isDate },
	questionCount: { writable: false, readable: true },
	responseCount: { writable: false, readable: true },
};

Object.freeze(Form);


export default Form;
