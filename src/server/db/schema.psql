--
-- RECEIVERS
--

-- stores people and orginizations with email address
CREATE TABLE IF NOT EXISTS receivers(
	id SERIAL PRIMARY KEY,
	email VARCHAR(255) UNIQUE
);

-- stores all receiver lists
CREATE TABLE IF NOT EXISTS receiver_lists(
	id SERIAL PRIMARY KEY,
	info JSONB NOT NULL, -- default: form name + date 
	created TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);

-- receiver and lists (many to many)
CREATE TABLE IF NOT EXISTS receivers_in_lists(
	receiver_id INTEGER NOT NULL REFERENCES receivers(id) ON DELETE RESTRICT,
	list_id INTEGER NOT NULL REFERENCES receiver_lists(id) ON DELETE CASCADE
);


--
-- TAGS
-- 

CREATE TABLE IF NOT EXISTS tags(
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) NOT NULL UNIQUE
);


CREATE TABLE IF NOT EXISTS receiver_tags(
	receiver_id INTEGER NOT NULL,
	tag_id INTEGER NOT NULL
);


CREATE TABLE IF NOT EXISTS receiver_list_tags(
	receiver_id INTEGER NOT NULL,
	tag_id INTEGER NOT NULL
);


--
-- STATES
--

-- created, copied, edited, deleted
CREATE TABLE IF NOT EXISTS states(
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) UNIQUE NOT NULL
);


--
-- ROLES
--

CREATE TABLE IF NOT EXISTS roles(
	id SERIAL PRIMARY KEY,
	info JSONB NOT NULL, -- default: form name + date 
	modified TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);


CREATE TABLE IF NOT EXISTS actions(
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) UNIQUE NOT NULL
);

-- personal, local, enclosing, global
CREATE TABLE IF NOT EXISTS scopes(
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS role_actions(
	role_id INTEGER REFERENCES roles(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	action_id INTEGER REFERENCES actions(id)
		ON UPDATE CASCADE
		ON DELETE RESTRICT,
	scope_id INTEGER REFERENCES scopes(id)
		ON UPDATE CASCADE
		ON DELETE RESTRICT
);


--
-- ORGANIZATIONS
--

CREATE TABLE IF NOT EXISTS organizations(
	id SERIAL PRIMARY KEY,
	receiver_id INTEGER UNIQUE NOT NULL REFERENCES receivers(id),
	info JSONB, -- атрибуты info JSON заранее неизвестны
	status_id INTEGER NOT NULL REFERENCES states(id),
	modified TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);


CREATE TABLE IF NOT EXISTS org_links(
	org_id INTEGER REFERENCES organizations(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	chief_org_id INTEGER REFERENCES organizations(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	distance INTEGER NOT NULL DEFAULT 1,

	PRIMARY KEY (org_id, chief_org_id)
);


--
-- USERS
--

CREATE TABLE IF NOT EXISTS users(
	id SERIAL PRIMARY KEY,
	receiver_id INTEGER UNIQUE NOT NULL REFERENCES receivers(id),
	info JSONB,
	org_id INTEGER REFERENCES organizations(id) ON DELETE CASCADE,
	role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE RESTRICT,
	status_id INTEGER NOT NULL REFERENCES states(id) ON DELETE RESTRICT,
	login VARCHAR(255) UNIQUE,
	hash VARCHAR(255) NOT NULL,
	modified TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp,
	last_seen TIMESTAMP WITH TIME ZONE
);


--
-- FORMS AND RESPONSES
--

CREATE TABLE IF NOT EXISTS forms(
	id SERIAL PRIMARY KEY,
	scheme JSONB NOT NULL,
	options JSONB,
	author_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	status_id INTEGER NOT NULL REFERENCES states(id) ON DELETE RESTRICT,
	changed TIMESTAMP WITH TIME ZONE,
	receivers_list_id INTEGER DEFAULT NULL
);


CREATE TABLE IF NOT EXISTS form_receiver_lists(
	form_id INTEGER NOT NULL REFERENCES forms(id),
	receivers_list_id INTEGER NOT NULL REFERENCES receiver_lists(id)
);


CREATE TABLE IF NOT EXISTS responses(
	id SERIAL PRIMARY KEY,
	form_id INTEGER REFERENCES forms(id) ON DELETE CASCADE,
	list JSONB NOT NULL,
	receiver_id INTEGER REFERENCES receivers(id) DEFAULT NULL,
	author_id INTEGER REFERENCES users(id) DEFAULT NULL,
	status_id INTEGER REFERENCES states(id),
	changed TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);


--
-- ACCESS 
--

CREATE TABLE IF NOT EXISTS table_ids(
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS action_lists(
	id SERIAL PRIMARY KEY,
	author_id INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
	created TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);


CREATE TABLE IF NOT EXISTS action_and_lists(
	list_id INTEGER NOT NULL REFERENCES action_lists(id) ON DELETE CASCADE,
	action_id INTEGER NOT NULL REFERENCES actions(id) ON DELETE RESTRICT
);


--
-- The additional access to a certain object for users
--

CREATE TABLE IF NOT EXISTS shared_objects_for_users(
	user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	table_id INTEGER NOT NULL REFERENCES table_ids(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	record_id INTEGER NOT NULL,
	action_list_id INTEGER REFERENCES action_lists(id) ON DELETE RESTRICT
);


--
-- The additional access to the object for users of the certain organization
-- 

CREATE TABLE IF NOT EXISTS shared_objects_for_orgs(
	org_id INTEGER REFERENCES organizations(id) ON DELETE CASCADE,
	table_id INTEGER NOT NULL REFERENCES table_ids(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	record_id INTEGER NOT NULL,
	action_list_id INTEGER REFERENCES action_lists(id) ON DELETE RESTRICT
);


--
-- The additional role
--

CREATE TABLE IF NOT EXISTS extra_roles(
	user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
	role_id INTEGER REFERENCES actions(id) ON DELETE RESTRICT
);


--
-- LOG
--

CREATE TABLE IF NOT EXISTS statelog(
	table_id INTEGER NOT NULL REFERENCES table_ids(id) ON UPDATE CASCADE ON DELETE CASCADE,
	record_id INTEGER NOT NULL,
	state_id INTEGER NOT NULL REFERENCES states(id) ON DELETE RESTRICT,
	
	author_id INTEGER NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
	changed TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
);


--
--  SESSIONS
--

CREATE TABLE sessions (
	"sid" varchar NOT NULL COLLATE "default",
	"sess" JSONB NOT NULL,
	"expire" TIMESTAMP(6) NOT NULL
) WITH (OIDS=FALSE);


ALTER TABLE sessions 
	ADD CONSTRAINT "session_pkey" PRIMARY KEY ("sid")
	NOT DEFERRABLE INITIALLY IMMEDIATE;


--
-- NEWS
--

CREATE TABLE IF NOT EXISTS changelog(
	id SERIAL PRIMARY KEY,
	list TEXT NOT NULL
);


