CREATE TABLE IF NOT EXISTS states (
	id SERIAL PRIMARY KEY,
	value VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS shareable_tables (
	id SERIAL PRIMARY KEY,
	name VARCHAR(255) UNIQUE NOT NULL 
);


CREATE TABLE IF NOT EXISTS recipient_types (
	id SERIAL PRIMARY KEY,
	type VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS recipients (
	id SERIAL PRIMARY KEY,
	email VARCHAR(255) NOT NULL UNIQUE,
	type_id INTEGER NOT NULL REFERENCES recipient_types(id),
	status_id INTEGER NOT NULL REFERENCES states(id),
	updated TIMESTAMP WITH TIME ZONE DEFAULT now()
);


CREATE TABLE IF NOT EXISTS recipient_lists (
	id SERIAL PRIMARY KEY,
	author_id INTEGER NOT NULL,
	status_id INTEGER NOT NULL REFERENCES states(id),
	created TIMESTAMP WITH TIME ZONE
);


CREATE TABLE IF NOT EXISTS recipient_in_lists (
	recipient_id INTEGER NOT NULL REFERENCES recipients(id),
	list_id INTEGER NOT NULL REFERENCES recipient_lists(id)
);


CREATE TABLE IF NOT EXISTS tags (
	id SERIAL PRIMARY KEY,
	tag VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS recipient_tags (
	recipient_id INTEGER NOT NULL REFERENCES recipients(id),
	tag_id INTEGER NOT NULL REFERENCES tags(id)
);


CREATE TABLE IF NOT EXISTS roles (
	id SERIAL PRIMARY KEY,
	label VARCHAR(255) NOT NULL,
	info JSONB NOT NULL,
	author_id INTEGER NOT NULL,
	created TIMESTAMP WITH TIME ZONE DEFAULT now()
);


CREATE TABLE IF NOT EXISTS role_rights (
	table_id INTEGER NOT NULL REFERENCES shareable_tables(id),
	role_id INTEGER NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
	rights INTEGER NOT NULL,
	PRIMARY KEY (table_id, role_id)
);


CREATE TABLE IF NOT EXISTS organizations (
	id INTEGER PRIMARY KEY REFERENCES recipients(id),
	label VARCHAR(255) NOT NULL,
	info JSONB NOT NULL,
	author_id INTEGER NOT NULL
);


CREATE TABLE IF NOT EXISTS org_links (
	org_id INTEGER NOT NULL REFERENCES organizations(id),
	chief_org_id INTEGER NOT NULL REFERENCES organizations(id),
	distance INTEGER NOT NULL DEFAULT 1
);


CREATE TABLE IF NOT EXISTS users (
	id INTEGER PRIMARY KEY REFERENCES recipients(id),
	org_id INTEGER REFERENCES organizations(id),
	info JSONB NOT NULL,
	role_id INTEGER NOT NULL REFERENCES roles(id),
	hash VARCHAR(255),
	author_id INTEGER NOT NULL
);


CREATE TABLE IF NOT EXISTS user_tokens (
	user_id INTEGER UNIQUE NOT NULL REFERENCES users(id) ON DELETE CASCADE,
	token VARCHAR(255) UNIQUE NOT NULL
);


CREATE TABLE user_sessions (
	sid varchar NOT NULL COLLATE "default",
	sess JSONB NOT NULL,
	expire TIMESTAMP(6) NOT NULL
) WITH (OIDS=FALSE);


CREATE TABLE IF NOT EXISTS forms (
	id SERIAL PRIMARY KEY,
	scheme JSONB NOT NULL,
	options JSONB,
	author_id INTEGER NOT NULL REFERENCES users(id),
	status_id INTEGER NOT NULL REFERENCES states(id),
	modified TIMESTAMP WITH TIME ZONE
);


CREATE TABLE IF NOT EXISTS responses (
	id SERIAL PRIMARY KEY,
	form_id INTEGER NOT NULL REFERENCES forms(id),
	list JSONB NOT NULL,
	author_id INTEGER NOT NULL REFERENCES users(id),
	recipient_id INTEGER NOT NULL REFERENCES recipients(id),
	status_id INTEGER NOT NULL,
	modified TIMESTAMP WITH TIME ZONE
);


CREATE TABLE IF NOT EXISTS recipient_lists_tags (
	list_id INTEGER NOT NULL REFERENCES recipient_lists(id),
	tag_id INTEGER NOT NULL REFERENCES tags(id)
);


CREATE TABLE IF NOT EXISTS form_recipient_lists (
	form_id INTEGER NOT NULL REFERENCES forms(id),
	list_id INTEGER NOT NULL REFERENCES recipient_lists(id),
	rights INTEGER NOT NULL
);


CREATE TABLE IF NOT EXISTS shared_objects (
	table_id INTEGER NOT NULL REFERENCES shareable_tables(id),
	object_id INTEGER NOT NULL,
	rights INTEGER NOT NULL,
	recipient_id INTEGER NOT NULL REFERENCES recipients(id),
	shared TIMESTAMP WITH TIME ZONE,
	author_id INTEGER NOT NULL REFERENCES users(id)
);


ALTER TABLE recipient_lists ADD CONSTRAINT recipient_lists
FOREIGN KEY (author_id) REFERENCES users(id);


ALTER TABLE roles ADD CONSTRAINT roles_fk0 
FOREIGN KEY (author_id) REFERENCES users(id);


ALTER TABLE organizations ADD CONSTRAINT organizations_fk1
FOREIGN KEY (author_id) REFERENCES users(id);


ALTER TABLE users ADD CONSTRAINT users_fk0 
FOREIGN KEY (author_id) REFERENCES users(id);